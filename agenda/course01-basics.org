#+TODO: TODO(t!) WAIT(W@/!) | DONE(d!) CANCELED(c@) DELEGATED-AWAY(G@/!)
#+TODO: BUG(b) | FIXED(f) WONTFIX(w)
#+TITLE: Emacs Course 01

#+AUTHOR: Derek Feichtinger
#+EMAIL: dfeich@gmail.com

# the following property setting is inherited by all org headings
# it is used by an advanced feature for presenting nicer agenda views
# (org-super-agenda)
#+PROPERTY: agenda-group emacs_course

* Basic Emacs usage
  Emacs contains an excellent tutorial. You can reach it by using
  the keycombo "C-h t". The following exercises only contain a subset
  of commands.
** TODO Loading and saving files [0/4]
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 23:07]
   :END:
   - [ ] the standard way of loading a file uses the keycombo "C-x
     C-f" (ido-find-file). 
     - In this emacs configuration we have configured
       the *ido* system. This offers you a nice way of selecting the file
       with some fuzzy matching (e.g. when you enter "cb" it will show you
       "course-basics" among the hits, since it matches the initials)
     - when you enter "//" it will jump to the root file system.
     - when you enter "~/" it will jump to your home directory
     - if you enter the name of a nonexistent file "[nomatch]" will be displayes,
       if you hit <RETURN> it will offer to create this file as a new file. Confirm
       with a second <RETURN>.
   - [ ] a very powerful file navigation tool is available via the
     helm package in this Emacs configuration. Use the keycombo "<f5> f"
     (helm-find-files).
     - you can use the arrow keys to move up, down, into and out of directories
     - typing will narrow the candidates down according to your search expression
       as you type
     - <RETURN> opens the file
     - typing the name of a nonexistent file will offer to create it. If you type
       a nonexistent filename and terminate it by a "/", you will be asked whether
       you want to create that directory.
   - [ ] Save a file buffer after changing it by using the keycombo
     "C-x C-s" (save-buffer)
   - [ ] Save a buffer under another name by using "C-x C-w" (ido-write-file).

** TODO Understanding Emacs windows [0/6]
   Emacs is able to divide up its screen space into logical
   areas. They are called /windows/. It can do this even while running
   on an ASCII terminal. It has nothing to do with the graphical
   window manager within your Emacs session may be running.

   This is a typical source of confusion for new users, because the
   term "window" is normally used for the main windows in which your
   graphical window manager (like Gnome or KDE) are running
   applications. In Emacs these "external" windows are called /frames/.
   So, Emacs is running in one or multiple frames provided by your
   window manager, and each frame may contain multiple Emacs windows
   sharing the frame.

   - [ ] split the current window horizontally in 2 windows. Use
     the keycombo "C-x 2" (split-window-below)
   - [ ] split the window in which you currently are in two vertical
     windows by using the keycombo "C-x 3" (split-window-right)
   - [ ] you can switch to another window by using the keycombo
     "C-x o" (other-window)
   - [ ] you can scroll the "other" window by using "<M-PageUp>" and
     "<M-PageDown>", or alternatively "<C-M-v>" and "<C-M-S-v>"
     (scroll-other-window). This is very practical for scrolling the
     documentation without leaving the current window.
   - [ ] two make the current window the only window of the frame,
     you can use the keycombo "C-x 1" (delete-other-windows)
   - [ ] split the window again using the commands above. You can
     close the window in which the cursor is, by using the keycombo
     "C-x 0" (delete-window)

** TODO selecting, copying and pasting [0/6]
   Emacs predates the time where the /Cut, Copy & Paste/ expressions
   were coined, and the old command names still are used.
   - [ ] You can select text by placing the cursor on the starting
     position and then use the keycombo "C-SPC" (set-mark-command). The
     position where you do this is called /the mark/. When you now move
     the cursor you will see that the region between the mark and your current
     position will be highlighted. This selected text is called /the region/.
   - [ ] Cutting text is called /killing text/. You can kill the text
     by using the keycombo "c-k" (kill-line, or similar commands depending
     on the current mode). Kill this sentence.
   - [ ] You can insert/paste the killed text somewhere else by moving
     your cursor to the new position and using the keycombo "C-y" (org-yank).
     This action is called /yanking/. Insert your killed text here:
   - [ ] If you do not want to cut the text, but you just want to copy is,
     you invoke the keycombo "M-w" (kill-ring-save). This leaves the region
     as it is, but you can insert it somewhere else with "C-y" as above.
   - [ ] When you invoke "C-y" multiple times in a row, the inserted
     text will be exchanged against an earlier killed text. This way
     you can go throught the history of copied text pieces. The memory
     where the copied texts are stored is called the "kill-ring"
   - [ ] an even simpler way to work with the "kill-ring" is to
     use the respective helm command which in this Emacs config is
     mapped to "<f5> k" (helm-show-kill-ring). Try it out.
     
** TODO searching for strings and regular expressions [0/4]
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 23:07]
   :END:
   - [ ] Use the keycombo "C-s" (isearch-forward) to do an incremental
     string search forward. Hitting "C-s" again jumps to the next match.
     <RETURN> exits the search, placing the cursor after the current hit.
     - You can get extensive help on isearch by looking up its help page
       by "C-h k C-s" (q.v. [[*What does this key or combo do?][What does this key or combo do?]])
   - [ ] Use the keycombo "C-u C-s" (isearch-forward) to do an incremental
     regexp search forward.
   - [ ] The keycombos "C-r" and "C-u C-r" do the same in backwards direction
   - [ ] One of the best search tools uses the helm framework and is included
     in this configuration: [[https://github.com/emacsorphanage/helm-swoop][helm-swoop]]. Use "<f5> s" (helm-swoop) to enter a
     search mode where you see all the hits that match your current search expression
     as you type.
     - while you are searching, you can go to the edit mode (look at the top line. The
       command is listed there, "C-c C-e"). In edit mode you can change all the lines, and
       then write them back to the buffer.
     - If you use [M-i] while searching (also mentioned in the top line), the search
       will go over all open buffers of this Emacs session.

** TODO Executing Emacs commands and getting information about them [0/4]
   Emacs has a huge number of commands, many of them are not bound to
   key combinations. Such commands can be entered after using the
   key combo "M-x". In this configuration we have configured the
   package "smex" which makes the selection of commands much easier.

   - [ ] run the command "emacs-version" by using the keycombo "M-x".
     The fuzzy matching of smex will allow you to enter e.g. the initials
     "ev", or you can type "emav", or "emacs-ver". <RETURN> selects the
     current command.
   - [ ] if you want to get information about a command in smex, you can
     invoke the help system by using the keycombo "C-h f" (describe-function)
     while being in the smex selection dialog.
   - [ ] If you want to get information about a function written in the text,
     you can use the keycombo "C-h f" while the cursor is on the name of a
     function. Try it with the one on the next line
     :                emacs-version
     Emacs will offer you the word under the cursor as the default for looking
     up the respective help page.
   - [ ] One of the most powerful ways to get information is by using the
     helm package that is configured in this Emacs configuration. You
     can invoke the keycombo "<f5> a" (helm-apropos). You can then search
     for Emacs commands, functions, and variables.
     - if your cursor is on a name that matches an Emacs function or variable,
       it will be already used as the default in the narrowing framework
     - <RETURN> will jump to the respective help page
     - even better, "C-j" will show the help page while staying in helm mode,
       so you can look at multiple commands.

* Emacs help and info systems
  Emacs is very consistent in its basic key mappings. All basic help
  functionalities start with the keycombo "C-h"

** TODO Using the GNU Info system [0/1]
   Emacs Documentation is in Info format. Though this is an old
   format, it still is extremely useful and lightweight.

   - [ ] Enter the info system by using the keycombo "C-h i" (info).
     Exit it again by using "q". Maybe it is best, if you open a
     second window (e.g. by doing "C-x 3" to split the current one),
     so that you still can see the instructions below

   These are the key combinations you should try to remember in order
   to navigate info
   - <TAB> :: Jump to the next link
   - <RET> :: visit a link
   - l :: go to the last page you viewed
   - n :: go to the next page
   - p :: go to the previous page
   - u :: go up in the hierarchy
   - t :: go to the top of the current info node
   - d :: go to the top of all info nodes (the info main directory)
   - q :: quit info
   - i :: allows you to search the keyword index of this info file 
   - g :: go to another node. Most useful if you want to go to another
     top node in a file. You need to put the node into parentheses, e.g.
     type: g (emacs). Tab expansion is available

** TODO What does this key or combo do?

   - [ ] To find out what a certain key can do in the current
     context, use the keycombo "<C-h> k". You are then asked
     to enter the combo. Try to find out what is mapped to
     the "C-c C-t" combination.

** TODO Get help on the current mode [0/2]
   - [ ] Invoke the help for the current buffer's major mode by
     using the keycombo "C-h m"
   - [ ] In the course's configuration I included a helm mode
     for fast finding keys of the current mode.
     Try the keycombo "<f5> d" (helm-descbinds). You now can narrow
     down to commands
* Basic Org mode
** TODO Basic folding [0/3]
   SCHEDULED: <2020-06-12 Fri>
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 10:38]
   :END:
   Org mode has the ability to fold all kinds of its text structures, e.g.
   - headlines
   - lists
   - a set of structures we will encounter later, like drawers (e.g. the LOGBOOK drawer
     you see in some tasks) and blocks

   Try it out
   - [ ] Go to some headlines and fold/unfold them just using <TAB>
   - [ ] fold and unfold the whole document by using the keycombo "S-<TAB>"
     anywhere in the document (except if you are on a special element, e.g. in
     a list)
   - [ ] go to some items in this list and experiment with the folding
   - test 1
     - test 2
     - test 3
       - test 4

   You may want to read [[info:org#Visibility Cycling][info:org#Visibility Cycling]]

** TODO The usefulness of lists [0/4]
   SCHEDULED: <2020-06-12 Fri>
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 10:39]
   :END:
   
   Org mode started its life as a highly versatile outline editor and it is
   very efficient at keeping information in hierarchical lists. The headline
   hierarchy is one example of this. But there also basic lists, and Org
   provides powerful commands to compose and manipulate them

   - [ ] use keycombo "<M-up>" (org-metaup) and keycombo "<M-down>" (org-metadown) 
     to move list up and down
   - [ ] use keycombo "<M-left>" and "<M-right>" to change the
     hierarchy level of items. If you want to move a whole tree
     including its sub-items, you need to use keycombo "<M-S-right>"
     (org-shiftmetaright) or keycombo "<M-S-left>" (org-shiftmetaleft)
   - [ ] add list items by using the keycombo "<M-Return>" (org-meta-return) at the end
     of a list line
   - [ ] change the list type and list-marker by using the keycombo "<S-left>" (org-shiftleft)
     and "<S-right>" (org-shiftright) on different lines of the following list, and watch how
     this cycles the symbols.
   - [ ] you can mark several lines using the usual "<C-SPACE>" and then move
     the cursor down. With the region highlighted, use "<S-M-right>". This
     moves all the lines you marked one hierarchy level to the right.

   My test list
   - item 1
     - item 1.1
   - item 2
     - item 2.1
     - item 2.2
   - item 3
     - item 3.1
     - item 3.2

** TODO Links in Org mode [0/3]
   SCHEDULED: <2020-06-12 Fri>
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 10:29]
   :END:

   - [ ] You can jump to a link's target using the keycombo "C-c C-o"
     (org-open-at-point). Try it out with some of the following links.
   - Org recognizes simple links in a text just based on a number
     of string patterns
     - https://orgmode.org/worg/
     - file:/tmp
     - file:~/.emacs.d/init.el
     - [[info:org#Link Format][info:org#Link Format]]  - a link to org's info pages
     - man:grep - org is extensible. This link to a man page works through a definition
       in our [[file:~/.emacs.d/org-init.el::(defun org-man-link-open (lnk)][org-init.el file]]
   - [ ] move your cursor behind one of the links below and press backspace. This will
     delete the closing bracket of the link, and you will see the underlying link syntax
     displayed. When you close the bracket again, Org will only show the description.
     You can just change the description by writing over it. If you want to change the
     underlying link address, see below.
     - Links with descriptions follow this general format
       :       [[LINK][DESCRIPTION]]
       here are some example links
       - [[https://orgmode.org/worg/][the Worg Website]]
       - [[file:/tmp][my tmp directory]]
       - [[file:~/.emacs.d/init.el][init.el]]
       - [[info:org#Link Format][the info page for the org link format]]  - a link to org's info pages
       - [[* Basic folding]] a link of this structure points to a heading in the present document
   - [ ] The keycombo "C-c C-l" (org-insert-link) can be used to insert and edit links.
     When the cursor is on a link, you will edit the link. Try it with the
     previous links

** TODO Some simple Org markup elements [0/4]
   Org mode offers a number of markup Elements ([[info:org#Emphasis and Monospace][q.v. this info page]]).
   The marking up of text is especially useful when we will export
   our documents to other formats like PDF, HTML, OpenOffice, etc.
   - [ ] test it by writing some bold and italic text. You will note
     that in this emacs configuration you will get two stars when you
     type a star (multiplication sign) after an empty space. This is
     in expectation that you want to write bold text. They behave the
     same as parentheses.
     - *bold text*
     - /italics/
     - =verbatim=,   =*this is not bold*=
     - _underlined_
     - +ugly strike-through+
   - [ ] *You can write text that contains
     a line break*, but usually this kind of markup is for shorter
     texts, and it maybe that the Emacs font setting will fail to
     format the text correctly.
   - [ ] You can wrap a piece of text into markers by using the normal
     Emacs way of selecting a region and then hitting one of the markup
     symbols. E.g. for making parts of the following text bold, use
     "<C-SPACE>" at the beginning and the go with the cursor to the
     end (the region will be highlighted). Then hit "*".
     - here: wrap this text in bold
   - [ ] A comment in Org is written by using a '#' at the beginning of a line
     (there may just be spaces before it). Example:
     # a comment
     When an org document is exported, comments are ignored. So, like in
     programming, comments are a nice way to add information to a document
     without their showing up in the final product.

** Org blocks
* Org mode Task and agenda system
** TODO Keywords for Task states [0/2]
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 16:14]
   :END:
   - You can read this info page: [[info:org#TODO Basics][info:org#TODO Basics]]
   - by default Org offers *TODO* and *DONE* states, but this can be easily
     adapted in sophisticated ways, as in this file. At the top of the
     file I defined a line defining different states
     : #+TODO: TODO(t!) WAIT(W@/!) | DONE(d!) CANCELED(c@) DELEGATED-AWAY(G@/!)
   - [ ] change the state of a task by using the keycombo "C-c C-t" (org-todo).
     If there are multiple possibilities to which a state can evolve, you will
     be offered a menu.
   - you can fine-tune the states changes (details are found
     in this advanced information:  [[info:org#Tracking TODO state changes][info:org#Tracking TODO state changes)]]
     - directives 
       - character :: a normal character defines the abbreviation used for that state 
       - ! :: logs a timestamp for changes to this state
       - @ :: upon changing to this state, asks for a comment
       - /! :: also log a timestamp when leaving the state (if next state does
	 not already involve a timestamp taking)
   - [ ] If you are on char at the beginning of a headline (the initial star),
     a number of shortcuts are available. If you hit "t" at this position,
     you will be offered the task state switching as if you had used "C-c C-t".
     Try it out.

** TODO Scheduling tasks and deadlines [0/3]
   Org mode can associate times for scheduling tasks. Don't raise your
   Eyebrows - this is not an unnecessary complexity, but an essential
   functionality that many systems are lacking.
   - there is the time when a task needs to be finished. This is the
     *deadline*. This is usually a pretty static timestamp (for most people,
     at least...)
   - but there is also the date/time when you want to work on the task. E.g.
     the deadline may be in two weeks, but I want to work on this next Wednesday,
     so a task manager should offer the notion of expressing this concept.
     This is the *scheduled* time, and this may be changed quite a lot during
     a tasks lifetime. If I do not finish the task on Wednesday, I may reschedule
     it for finishing it on Friday. But this will not affect the deadline!
   - [ ] Schedule a task. This you can do by using the keycombo "C-c C-s" while
     you are in a task. A calendar will be displayed. Within this calendar you
     move by
     - <S-right>, <S-left>, <S-up>, <S-down> :: moves by days
     - <M-S-left>, <M-S-right> :: moves by months
     - <M-S-up>, <M-S-down> :: moves by years
     - <RET> :: selects the date
     - C-g :: cancels
   - [ ] take note that now there is a "SCHEDULED" line added to the task, just
     below the task's headline
   - [ ] add a deadline to the same task by using the keycombo "C-c
     C-d" (org-deadline). Take note that as with the scheduling, now
     there is a "DEADLINE" keyword with timestamp below the task's headline.
   - [ ] you can create repeating taks by adding a modifier to a time stamp like
     in these exapmples
     - [2020-07-10 Fri +7d]
     - [2020-07-10 Fri +2w]
     Go to one of the tasks in this file and schedule it or give it a
     deadline ("C-c C-s" or "C-c C-d").  Then add a repeater modifier
     like in the examples above.
     When you now resolve the task ("C-c C-t" and then chose an end-state like DONE),
     you will see that the taks is launched again and the timestamp is shifted
     by the repeater interval.

     You can read more about timestamps in [[info:org#Timestamps][info:org#Timestamps]]

** TODO Changing time stamps [0/5]
   Org uses time stamps in many locations. You saw
   them when scheduling tasks and also when changing
   the state of a task. Org offers a number of nice
   keymappings to change timestamps fast.

   Active timestamps will show up in the agenda, inactive ones
   will not. For normal texts, it is best to always use the inactive
   timestamps
   - active timestamp: <2020-06-11 Thu 12:30>
   - inactive timestamp: [2020-06-11 Thu 16:38]

   Exercises
   - [ ] go to a timestamp above and modify it. You can position
     the cursor on any part of the date or the time. When you use
     <S-up> or <S-down> the timestamp will be shifted accordingly.
     <S-right> and <S-left> will always move the day.
   - [ ] go to one of your scheduled or deadline timestamps and
     change it like in the previous task
   - [ ] for big changes one may want to use the calendar. Position
     the cursor on a timestamp and use
     - C-c . :: use calendar (leaves an active timestamp)
     - C-c ! :: use calendar (leaves an inactive timestamp)
   - [ ] the above keycombos can also be used to enter a new timestamp
     anywhere in an org file. Try it.
   - [ ] If you add the prefix argument "C-u" before one of the above
     insertion commands, it will not only create a date timestamp, but
     also add the current time. Try it with the keycombo "C-u C-c !",
     select a date from the offered calendar
     
** TODO Jump to tasks with helm-org
   [[https://emacs-helm.github.io/helm/][Helm]] is a great system for selections. We will meet it later.
   It is included and configured in my course's configuration.

   - [ ] Use the keycombo "<f5> <f5>" (helm-org-agenda-files-headings).
     When you now type characters, the selection options for matching
     tasks will be narrowed down. Use the cursor to go up and down,
     press <RETURN> to select the task to which you want to jump
     
** TODO Display the agenda and navigate within it [0/3]
   - [ ] Use the keycombo "C-c a" to get the agenda menu. In the menu
     choose "a" for "agenda". You will get the default view of the agenda,
     which is the present week.
   - [ ] try navigating in the agenda using these keys
     - w :: week view
     - d :: day view
     - f :: forward (by day/week)
     - b :: backward (by day/week)
     - . :: go to today 
     - j :: jump to some date using the calendar
     - g :: rebuild the agenda view
   - [ ] position the cursor on a task and try the following different
     ways to view a task
     - <SPC> :: View task in other window without entering that window
       (you stay in the agenda window)
     - <TAB> :: go to task in other window
     - <RETURN> :: switch to task buffer in this window 

** TODO Modify Scheduled times from the agenda view [0/2]
   - [ ] In the agenda view, place the cursor on a task and
     use <S-righ> to shift the scheduled date forward. An information
     about the shifting will be shown in an overlay. The respective
     time stamp in the org file will be changed. If you use the
     Emacs undo command (mapped to multiple key, e.g. "C-_"), the change
     will be reverted in the agenda as well as in the Org file.
   - [ ] use "g" to rebuild the view (the overlays vanish)
   - This is the typical workflow you will do in the morning and at
     the end of a day. In the morning, you schedule the tasks you want
     to do on the current day to "today" and work on them. In the
     evening, you can decide to reschedule open tasks to some other
     day.

